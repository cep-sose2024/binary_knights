{"$message_type":"diagnostic","message":"function cannot return without recursing","code":{"code":"unconditional_recursion","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":2035,"byte_end":2075,"line_start":74,"line_end":74,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn getSignatureAlgorithm() -> String {","highlight_start":5,"highlight_end":45}],"label":"cannot return without recursing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":2093,"byte_end":2116,"line_start":75,"line_end":75,"column_start":16,"column_end":39,"is_primary":false,"text":[{"text":"        return getSignatureAlgorithm()","highlight_start":16,"highlight_end":39}],"label":"recursive call site","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a `loop` may express intention better if this is on purpose","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unconditional_recursion)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function cannot return without recursing\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:74:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn getSignatureAlgorithm() -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mcannot return without recursing\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return getSignatureAlgorithm()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrecursive call site\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: a `loop` may express intention better if this is on purpose\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unconditional_recursion)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `setAlgorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1673,"byte_end":1685,"line_start":64,"line_end":64,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn setAlgorithm(newAlgorithm: String) -> String {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1673,"byte_end":1685,"line_start":64,"line_end":64,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn setAlgorithm(newAlgorithm: String) -> String {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":"set_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `setAlgorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:64:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn setAlgorithm(newAlgorithm: String) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `set_algorithm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `newAlgorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1686,"byte_end":1698,"line_start":64,"line_end":64,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn setAlgorithm(newAlgorithm: String) -> String {","highlight_start":25,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1686,"byte_end":1698,"line_start":64,"line_end":64,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn setAlgorithm(newAlgorithm: String) -> String {","highlight_start":25,"highlight_end":37}],"label":null,"suggested_replacement":"new_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `newAlgorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:64:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn setAlgorithm(newAlgorithm: String) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `new_algorithm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `setSignatureAlgorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1784,"byte_end":1805,"line_start":67,"line_end":67,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1784,"byte_end":1805,"line_start":67,"line_end":67,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"set_signature_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `setSignatureAlgorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:67:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `set_signature_algorithm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `new_Sign_algorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1806,"byte_end":1824,"line_start":67,"line_end":67,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1806,"byte_end":1824,"line_start":67,"line_end":67,"column_start":34,"column_end":52,"is_primary":true,"text":[{"text":"    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {","highlight_start":34,"highlight_end":52}],"label":null,"suggested_replacement":"new_sign_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `new_Sign_algorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:67:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn setSignatureAlgorithm(new_Sign_algorithm: String) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `new_sign_algorithm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `getAlgorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1925,"byte_end":1937,"line_start":70,"line_end":70,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn getAlgorithm() -> String {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":1925,"byte_end":1937,"line_start":70,"line_end":70,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn getAlgorithm() -> String {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":"get_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getAlgorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:70:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn getAlgorithm() -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_algorithm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `getSignatureAlgorithm` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":2042,"byte_end":2063,"line_start":74,"line_end":74,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn getSignatureAlgorithm() -> String {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"binaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs","byte_start":2042,"byte_end":2063,"line_start":74,"line_end":74,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn getSignatureAlgorithm() -> String {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"get_signature_algorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `getSignatureAlgorithm` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbinaryknights_rust_crypto/src/tpm/macos/main/src/lib.rs:74:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn getSignatureAlgorithm() -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `get_signature_algorithm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
